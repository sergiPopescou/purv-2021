Breakpoint 1 at 0x11d2: file primjer_2021_05.c, line 14.
Breakpoint 2 at 0x11fd: file primjer_2021_05.c, line 16.
Breakpoint 3 at 0x1205: file primjer_2021_05.c, line 17.
Starting program: /home/nemanja/Desktop/vjezba1/primjer_2021_05 

Breakpoint 1, main () at primjer_2021_05.c:14
14	      ln = strlen(s); // remove this line to end seg fault
1: ln = 21845
2: s = 0x7fffffffe090 "automobil"
3: dyn_s = 0x0
4: $eax = -8048
5: /a $rsp = 0x7fffffffdf80
Continuing.

Breakpoint 2, main () at primjer_2021_05.c:16
16	      dyn_s = s;
1: ln = 9
2: s = 0x7fffffffe090 "automobil"
3: dyn_s = 0x555555559ac0 ""
4: $eax = 1431673536
5: /a $rsp = 0x7fffffffdf80
Dump of assembler code for function main:
primjer_2021_05.c:
7	int main(void){
   0x00005555555551a9 <+0>:	endbr64 
   0x00005555555551ad <+4>:	push   %rbp
   0x00005555555551ae <+5>:	mov    %rsp,%rbp
   0x00005555555551b1 <+8>:	sub    $0x20,%rsp

8	      char *s;
9	      int ln;
10	      puts("Enter String");
   0x00005555555551b5 <+12>:	lea    0xe48(%rip),%rdi        # 0x555555556004
   0x00005555555551bc <+19>:	callq  0x555555555080 <puts@plt>

11	      //scanf("%s", s);
12	      gets(s);
   0x00005555555551c1 <+24>:	mov    -0x10(%rbp),%rax
   0x00005555555551c5 <+28>:	mov    %rax,%rdi
   0x00005555555551c8 <+31>:	mov    $0x0,%eax
   0x00005555555551cd <+36>:	callq  0x5555555550a0 <gets@plt>

13	      
14	      ln = strlen(s); // remove this line to end seg fault
   0x00005555555551d2 <+41>:	mov    -0x10(%rbp),%rax
   0x00005555555551d6 <+45>:	mov    %rax,%rdi
   0x00005555555551d9 <+48>:	callq  0x555555555090 <strlen@plt>
   0x00005555555551de <+53>:	mov    %eax,-0x14(%rbp)

15	      char *dyn_s = (char*) malloc (strlen(s)+1); //strlen(s) is used here as well but doesn't change outcome
   0x00005555555551e1 <+56>:	mov    -0x10(%rbp),%rax
   0x00005555555551e5 <+60>:	mov    %rax,%rdi
   0x00005555555551e8 <+63>:	callq  0x555555555090 <strlen@plt>
   0x00005555555551ed <+68>:	add    $0x1,%rax
   0x00005555555551f1 <+72>:	mov    %rax,%rdi
   0x00005555555551f4 <+75>:	callq  0x5555555550b0 <malloc@plt>
   0x00005555555551f9 <+80>:	mov    %rax,-0x8(%rbp)

16	      dyn_s = s;
=> 0x00005555555551fd <+84>:	mov    -0x10(%rbp),%rax
   0x0000555555555201 <+88>:	mov    %rax,-0x8(%rbp)

17	      dyn_s[strlen(s)] = '\0';
   0x0000555555555205 <+92>:	mov    -0x10(%rbp),%rax
   0x0000555555555209 <+96>:	mov    %rax,%rdi
   0x000055555555520c <+99>:	callq  0x555555555090 <strlen@plt>
   0x0000555555555211 <+104>:	mov    -0x8(%rbp),%rdx
   0x0000555555555215 <+108>:	add    %rdx,%rax
   0x0000555555555218 <+111>:	movb   $0x0,(%rax)

18	      puts(dyn_s);
   0x000055555555521b <+114>:	mov    -0x8(%rbp),%rax
   0x000055555555521f <+118>:	mov    %rax,%rdi
   0x0000555555555222 <+121>:	callq  0x555555555080 <puts@plt>

19	      return 0;
   0x0000555555555227 <+126>:	mov    $0x0,%eax

20	    }
   0x000055555555522c <+131>:	leaveq 
   0x000055555555522d <+132>:	retq   
End of assembler dump.
Continuing.

Breakpoint 3, main () at primjer_2021_05.c:17
17	      dyn_s[strlen(s)] = '\0';
1: ln = 9
2: s = 0x7fffffffe090 "automobil"
3: dyn_s = 0x7fffffffe090 "automobil"
4: $eax = -8048
5: /a $rsp = 0x7fffffffdf80
Dump of assembler code for function main:
primjer_2021_05.c:
7	int main(void){
   0x00005555555551a9 <+0>:	endbr64 
   0x00005555555551ad <+4>:	push   %rbp
   0x00005555555551ae <+5>:	mov    %rsp,%rbp
   0x00005555555551b1 <+8>:	sub    $0x20,%rsp

8	      char *s;
9	      int ln;
10	      puts("Enter String");
   0x00005555555551b5 <+12>:	lea    0xe48(%rip),%rdi        # 0x555555556004
   0x00005555555551bc <+19>:	callq  0x555555555080 <puts@plt>

11	      //scanf("%s", s);
12	      gets(s);
   0x00005555555551c1 <+24>:	mov    -0x10(%rbp),%rax
   0x00005555555551c5 <+28>:	mov    %rax,%rdi
   0x00005555555551c8 <+31>:	mov    $0x0,%eax
   0x00005555555551cd <+36>:	callq  0x5555555550a0 <gets@plt>

13	      
14	      ln = strlen(s); // remove this line to end seg fault
   0x00005555555551d2 <+41>:	mov    -0x10(%rbp),%rax
   0x00005555555551d6 <+45>:	mov    %rax,%rdi
   0x00005555555551d9 <+48>:	callq  0x555555555090 <strlen@plt>
   0x00005555555551de <+53>:	mov    %eax,-0x14(%rbp)

15	      char *dyn_s = (char*) malloc (strlen(s)+1); //strlen(s) is used here as well but doesn't change outcome
   0x00005555555551e1 <+56>:	mov    -0x10(%rbp),%rax
   0x00005555555551e5 <+60>:	mov    %rax,%rdi
   0x00005555555551e8 <+63>:	callq  0x555555555090 <strlen@plt>
   0x00005555555551ed <+68>:	add    $0x1,%rax
   0x00005555555551f1 <+72>:	mov    %rax,%rdi
   0x00005555555551f4 <+75>:	callq  0x5555555550b0 <malloc@plt>
   0x00005555555551f9 <+80>:	mov    %rax,-0x8(%rbp)

16	      dyn_s = s;
   0x00005555555551fd <+84>:	mov    -0x10(%rbp),%rax
   0x0000555555555201 <+88>:	mov    %rax,-0x8(%rbp)

17	      dyn_s[strlen(s)] = '\0';
=> 0x0000555555555205 <+92>:	mov    -0x10(%rbp),%rax
   0x0000555555555209 <+96>:	mov    %rax,%rdi
   0x000055555555520c <+99>:	callq  0x555555555090 <strlen@plt>
   0x0000555555555211 <+104>:	mov    -0x8(%rbp),%rdx
   0x0000555555555215 <+108>:	add    %rdx,%rax
   0x0000555555555218 <+111>:	movb   $0x0,(%rax)

18	      puts(dyn_s);
   0x000055555555521b <+114>:	mov    -0x8(%rbp),%rax
   0x000055555555521f <+118>:	mov    %rax,%rdi
   0x0000555555555222 <+121>:	callq  0x555555555080 <puts@plt>

19	      return 0;
   0x0000555555555227 <+126>:	mov    $0x0,%eax

20	    }
   0x000055555555522c <+131>:	leaveq 
   0x000055555555522d <+132>:	retq   
End of assembler dump.
Continuing.
[Inferior 1 (process 3265) exited normally]
