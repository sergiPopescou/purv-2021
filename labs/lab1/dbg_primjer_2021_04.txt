// breakpoint prije funkcije add_numbers
Breakpoint 1 at 0x685: file primjer_2021_04.c, line 17.
// breakpoint na funkciji add_numbers
Breakpoint 2 at 0x654: file primjer_2021_04.c, line 5.

// ispis adresa sp i bp nakon svakog pokretanja
1: /a $sp = <error: No registers.>
2: /a $bp = <error: No registers.>

// run
Starting program: /home/luka/Desktop/primjer202104 

Breakpoint 1, main () at primjer_2021_04.c:18
18	     suma=add_numbers(n1,n2);
1: /a $sp = 0x7fffffffde70
2: /a $bp = 0xffffffffffffde90

// mjesto gdje se trenutno nalazimo
Dump of assembler code for function main:
primjer_2021_04.c:
12	{
   0x0000555555554664 <+0>:	push   %rbp
   0x0000555555554665 <+1>:	mov    %rsp,%rbp
   0x0000555555554668 <+4>:	sub    $0x20,%rsp

13		 char *poruka = "Suma brojeva 1 i 2 je";
   0x000055555555466c <+8>:	lea    0xe1(%rip),%rax        # 0x555555554754
   0x0000555555554673 <+15>:	mov    %rax,-0x10(%rbp)

14	     int *p; 
15	     int n1=1;
   0x0000555555554677 <+19>:	movl   $0x1,-0x18(%rbp)

16	     int n2=2;
   0x000055555555467e <+26>:	movl   $0x2,-0x14(%rbp)

17	     
18	     suma=add_numbers(n1,n2);
=> 0x0000555555554685 <+33>:	mov    -0x14(%rbp),%edx
   0x0000555555554688 <+36>:	mov    -0x18(%rbp),%eax
   0x000055555555468b <+39>:	mov    %edx,%esi
   0x000055555555468d <+41>:	mov    %eax,%edi
   0x000055555555468f <+43>:	callq  0x55555555464a <add_numbers>
   0x0000555555554694 <+48>:	mov    %eax,0x20097a(%rip)        # 0x555555755014 <suma>

19	     printf("%s %d %d\n", poruka, suma, p);
   0x000055555555469a <+54>:	mov    0x200974(%rip),%edx        # 0x555555755014 <suma>
   0x00005555555546a0 <+60>:	mov    -0x8(%rbp),%rcx
   0x00005555555546a4 <+64>:	mov    -0x10(%rbp),%rax
   0x00005555555546a8 <+68>:	mov    %rax,%rsi
   0x00005555555546ab <+71>:	lea    0xb8(%rip),%rdi        # 0x55555555476a
   0x00005555555546b2 <+78>:	mov    $0x0,%eax
   0x00005555555546b7 <+83>:	callq  0x555555554520 <printf@plt>

20	
21	     return 0;
   0x00005555555546bc <+88>:	mov    $0x0,%eax

22	}   0x00005555555546c1 <+93>:	leaveq 
   0x00005555555546c2 <+94>:	retq   
End of assembler dump.

// stanje na steku
0x7fffffffde70:	0x555546d0	0x00005555	0x00000001	0x00000002
0x7fffffffde80:	0x55554754	0x00005555	0x00000000	0x00000000
0x7fffffffde90:	0x555546d0	0x00005555	0xf7a05b97	0x00007fff
0x7fffffffdea0:	0x00000001	0x00000000	0xffffdf78	0x00007fff
0x7fffffffdeb0:	0x00008000	0x00000001	0x55554664	0x00005555

// info frame
Stack level 0, frame at 0x7fffffffdea0:
 rip = 0x555555554685 in main (primjer_2021_04.c:18); 
    saved rip = 0x7ffff7a05b97
 source language c.
 Arglist at 0x7fffffffde90, args: 
 Locals at 0x7fffffffde90, Previous frame's sp is 0x7fffffffdea0
 Saved registers:
  rbp at 0x7fffffffde90, rip at 0x7fffffffde98

// adresa promjenljive suma
Symbol "suma" is static storage at address 0x555555755014.

// continue
Continuing.

Breakpoint 2, add_numbers (n1=1, n2=2) at primjer_2021_04.c:5
5	     int sum=n1+n2;
1: /a $sp = 0x7fffffffde60
2: /a $bp = 0xffffffffffffde60

// mjesto gdje se trenutno nalazimo
Dump of assembler code for function add_numbers:
primjer_2021_04.c:
4	{
   0x000055555555464a <+0>:	push   %rbp
   0x000055555555464b <+1>:	mov    %rsp,%rbp
   0x000055555555464e <+4>:	mov    %edi,-0x14(%rbp)
   0x0000555555554651 <+7>:	mov    %esi,-0x18(%rbp)

5	     int sum=n1+n2;
=> 0x0000555555554654 <+10>:	mov    -0x14(%rbp),%edx
   0x0000555555554657 <+13>:	mov    -0x18(%rbp),%eax
   0x000055555555465a <+16>:	add    %edx,%eax
   0x000055555555465c <+18>:	mov    %eax,-0x4(%rbp)

6	     return sum;
   0x000055555555465f <+21>:	mov    -0x4(%rbp),%eax

7	}
   0x0000555555554662 <+24>:	pop    %rbp
   0x0000555555554663 <+25>:	retq   
End of assembler dump.

// stanje na steku
0x7fffffffde60:	0xffffde90	0x00007fff	0x55554694	0x00005555
0x7fffffffde70:	0x555546d0	0x00005555	0x00000001	0x00000002
0x7fffffffde80:	0x55554754	0x00005555	0x00000000	0x00000000
0x7fffffffde90:	0x555546d0	0x00005555	0xf7a05b97	0x00007fff
0x7fffffffdea0:	0x00000001	0x00000000	0xffffdf78	0x00007fff

// info frame
Stack level 0, frame at 0x7fffffffde70:
 rip = 0x555555554654 in add_numbers (primjer_2021_04.c:5); 
    saved rip = 0x555555554694
 called by frame at 0x7fffffffdea0
 source language c.
 Arglist at 0x7fffffffde60, args: n1=1, n2=2
 Locals at 0x7fffffffde60, Previous frame's sp is 0x7fffffffde70
 Saved registers:
  rbp at 0x7fffffffde60, rip at 0x7fffffffde68

// sadrzaj registara edi i esi
3: $edi = 1
4: $esi = 2

// sadrzaj registara edx i eax
5: $edx = 2
6: $eax = 1

// step (naredna linija programskog koda)
6	     return sum;
1: /a $sp = 0x7fffffffde60
2: /a $bp = 0xffffffffffffde60
3: $edi = 1
4: $esi = 2
5: $edx = 1
6: $eax = 3

// mjesto gdje se trenutno nalazimo
Dump of assembler code for function add_numbers:
primjer_2021_04.c:
4	{
   0x000055555555464a <+0>:	push   %rbp
   0x000055555555464b <+1>:	mov    %rsp,%rbp
   0x000055555555464e <+4>:	mov    %edi,-0x14(%rbp)
   0x0000555555554651 <+7>:	mov    %esi,-0x18(%rbp)

5	     int sum=n1+n2;
   0x0000555555554654 <+10>:	mov    -0x14(%rbp),%edx
   0x0000555555554657 <+13>:	mov    -0x18(%rbp),%eax
   0x000055555555465a <+16>:	add    %edx,%eax
   0x000055555555465c <+18>:	mov    %eax,-0x4(%rbp)

6	     return sum;
=> 0x000055555555465f <+21>:	mov    -0x4(%rbp),%eax

7	}
   0x0000555555554662 <+24>:	pop    %rbp
   0x0000555555554663 <+25>:	retq   
End of assembler dump.

// stanje na steku
0x7fffffffde60:	0xffffde90	0x00007fff	0x55554694	0x00005555
0x7fffffffde70:	0x555546d0	0x00005555	0x00000001	0x00000002
0x7fffffffde80:	0x55554754	0x00005555	0x00000000	0x00000000
0x7fffffffde90:	0x555546d0	0x00005555	0xf7a05b97	0x00007fff
0x7fffffffdea0:	0x00000001	0x00000000	0xffffdf78	0x00007fff

// info frame
Stack level 0, frame at 0x7fffffffde70:
 rip = 0x55555555465f in add_numbers (primjer_2021_04.c:6); 
    saved rip = 0x555555554694
 called by frame at 0x7fffffffdea0
 source language c.
 Arglist at 0x7fffffffde60, args: n1=1, n2=2
 Locals at 0x7fffffffde60, Previous frame's sp is 0x7fffffffde70
 Saved registers:
  rbp at 0x7fffffffde60, rip at 0x7fffffffde68
